/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 18 11:01:53 GMT 2020
 */

package teapot.pga;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import teapot.pga.Options;
import teapot.pga.OptionsParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptionsParser_ESTest extends OptionsParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "=";
      // Undeclared exception!
      try { 
        OptionsParser.parse(stringArray0, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.OptionsParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "--COUNTED";
      stringArray0[1] = "--OUT";
      stringArray0[2] = "--MD";
      stringArray0[3] = "--XML";
      stringArray0[4] = "--IGNORED";
      stringArray0[5] = "--INPUT-DIR";
      stringArray0[6] = "--BY-LANG";
      OptionsParser.parse(stringArray0, options0);
      assertTrue(options0.isXml());
      assertTrue(options0.isMd());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      options0.setHasListFile(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "--REPORT-FILE";
      stringArray0[1] = "--COUNTED";
      stringArray0[2] = "1";
      stringArray0[3] = "--CSV-DELIMITER";
      stringArray0[4] = "--JSON";
      stringArray0[5] = "--CATEGORIZED";
      stringArray0[6] = "--BY-FILE";
      stringArray0[7] = "--BY-FILE";
      stringArray0[8] = "--REPORT-FILE";
      OptionsParser.parse(stringArray0, options0);
      assertTrue(options0.isJson());
      assertFalse(options0.isMd());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--XML";
      stringArray0[1] = "--IGNORED";
      stringArray0[2] = "--JSON";
      stringArray0[3] = "--BY-FILE-BY-LANG";
      stringArray0[4] = "--CSV";
      stringArray0[5] = "--JSON";
      stringArray0[6] = "--REPORT-FILE";
      stringArray0[7] = "--BY-LANG";
      OptionsParser.parse(stringArray0, options0);
      assertTrue(options0.isXml());
      assertTrue(options0.isCsv());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        OptionsParser.isSkip((File) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.OptionsParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".snapshot");
      File file0 = MockFile.createTempFile("uTTE'gO6Yg", "uTTE'gO6Yg", (File) mockFile0);
      Options options0 = new Options();
      boolean boolean0 = OptionsParser.isSkip(file0, options0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".snapshot");
      Options options0 = new Options();
      boolean boolean0 = OptionsParser.isSkip(mockFile0, options0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--CSV";
      stringArray0[1] = "--INPUT-DIR";
      stringArray0[2] = "--REPORT-FILE";
      stringArray0[3] = "--YAML";
      stringArray0[4] = "--XML";
      stringArray0[5] = "--FOUND";
      OptionsParser.parse(stringArray0, options0);
      assertTrue(options0.isYaml());
      assertEquals(",", options0.getCsvDelimiter());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--JSON";
      stringArray0[1] = "--EXCLUDE-DIR";
      stringArray0[2] = "--BY-FILE";
      stringArray0[3] = "--MD";
      stringArray0[4] = "--JSON";
      stringArray0[5] = "--BY-FILE-BY-LANG";
      // Undeclared exception!
      try { 
        OptionsParser.parse(stringArray0, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.OptionsParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[22];
      stringArray0[0] = "--OUT";
      stringArray0[1] = "--LIST-FILE";
      stringArray0[2] = "--HELP";
      OptionsParser.parse(stringArray0, options0);
      assertTrue(options0.isHasListFile());
      assertFalse(options0.isCsv());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--CATEGORIZED";
      stringArray0[1] = "--EXCLUDE-DIR";
      stringArray0[2] = "/";
      stringArray0[3] = "--CSV-DELIMITER";
      stringArray0[4] = "RI2:y]=mT4vj k8";
      OptionsParser.parse(stringArray0, options0);
      assertFalse(options0.isCsv());
      assertFalse(options0.isMd());
      assertFalse(options0.isJson());
      assertEquals("", options0.getCsvDelimiter());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionsParser optionsParser0 = new OptionsParser();
  }
}
