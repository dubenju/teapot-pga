/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 18 11:00:34 GMT 2020
 */

package teapot.pga;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import teapot.pga.Options;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--XML", "1");
      boolean boolean0 = options0.isXml();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("--JSON", "1");
      options0.setOpts(hashMap0);
      boolean boolean0 = options0.isJson();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      assertFalse(options0.isHasListFile());
      
      options0.setHasListFile(true);
      boolean boolean0 = options0.isHasListFile();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--BY-LANG", "1");
      boolean boolean0 = options0.isByLang();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("--REPORT-FILE", "--REPORT-FILE");
      options0.setOpts(hashMap0);
      String string0 = options0.getOutReportFile();
      assertNotNull(string0);
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--REPORT-FILE", "");
      String string0 = options0.getOutReportFile();
      assertFalse(options0.isHasListFile());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--IGNORED", "--YAML");
      String string0 = options0.getOutIgnored();
      assertNotNull(string0);
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("--IGNORED", "");
      options0.setOpts(hashMap0);
      String string0 = options0.getOutIgnored();
      assertFalse(options0.isHasListFile());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      options0.set("--FOUND", "V9 (bI");
      String string0 = options0.getOutFound();
      assertEquals("V9 (bI", string0);
      assertNotNull(string0);
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("--FOUND", "");
      options0.setOpts(hashMap0);
      String string0 = options0.getOutFound();
      assertNotNull(string0);
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("--COUNTED", "--CSV");
      options0.setOpts(hashMap0);
      String string0 = options0.getOutCounted();
      assertFalse(options0.isHasListFile());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--COUNTED", "");
      String string0 = options0.getOutCounted();
      assertFalse(options0.isHasListFile());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("--CATEGORIZED", "--EXCLUDE-DIR");
      options0.setOpts(hashMap0);
      String string0 = options0.getOutCategorized();
      assertNotNull(string0);
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--CATEGORIZED", "");
      String string0 = options0.getOutCategorized();
      assertFalse(options0.isHasListFile());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      options0.getOpts();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("1", "5GA /(Y6%(Fk;^");
      options0.setOpts(hashMap0);
      options0.getOpts();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((String) null, "");
      options0.setFilePath(mockFile0);
      options0.getFilePath();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("$0");
      options0.setFilePath(mockFile0);
      options0.getFilePath();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("kcyk(6}rl-M.'ze:%<", "--XML");
      options0.setFilePath(file0);
      options0.getFilePath();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--JSON", ".vZY/");
      options0.setFilePath(mockFile0);
      options0.getFilePath();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      options0.set("--EXCLUDE-DIR", ",");
      List<String> list0 = options0.getExcludeDirs();
      assertEquals(0, list0.size());
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      options0.set((String) null, "Aqo<ZzUUY]my");
      String string0 = options0.get((String) null);
      assertNotNull(string0);
      assertFalse(options0.isHasListFile());
      assertEquals("Aqo<ZzUUY]my", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      options0.set("", "");
      String string0 = options0.get("");
      assertNotNull(string0);
      assertFalse(options0.isHasListFile());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.set((String) null, ">pJJ/aY?#hCe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.remove("4:rK-gdh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.isYaml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.isXml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.isMd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.isJson();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.isCsv();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.isByLang();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.isByFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.getOutReportFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.getOutFound();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.getOutCounted();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.getOutCategorized();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.getExcludeDirs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Options options0 = new Options();
      options0.isCsv();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--EXCLUDE-DIR", ",bqTWEtQhI~s713");
      List<String> list0 = options0.getExcludeDirs();
      assertFalse(list0.contains(",bqTWEtQhI~s713"));
      assertFalse(options0.isHasListFile());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--EXCLUDE-DIR", "");
      List<String> list0 = options0.getExcludeDirs();
      assertFalse(options0.isHasListFile());
      assertFalse(list0.contains(""));
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Options options0 = new Options();
      options0.getExcludeDirs();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Options options0 = new Options();
      options0.getOutCategorized();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Options options0 = new Options();
      options0.getOutIgnored();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Options options0 = new Options();
      options0.get("--CSV");
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.isHasListFile();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Options options0 = new Options();
      options0.isByFile();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Options options0 = new Options();
      options0.getOutReportFile();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Options options0 = new Options();
      String string0 = options0.getCsvDelimiter();
      assertEquals("", string0);
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Options options0 = new Options();
      options0.getOutFound();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Options options0 = new Options();
      options0.isYaml();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Options options0 = new Options();
      options0.setOpts((HashMap<String, String>) null);
      // Undeclared exception!
      try { 
        options0.getCsvDelimiter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Options options0 = new Options();
      options0.getFilePath();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Options options0 = new Options();
      options0.remove("--REPORT-FILE");
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Options options0 = new Options();
      options0.getOutCounted();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Options options0 = new Options();
      options0.isByLang();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Options options0 = new Options();
      options0.isMd();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Options options0 = new Options();
      options0.isJson();
      assertFalse(options0.isHasListFile());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Options options0 = new Options();
      options0.isXml();
      assertFalse(options0.isHasListFile());
  }
}
