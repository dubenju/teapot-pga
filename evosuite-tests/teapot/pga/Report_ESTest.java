/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 18 11:03:22 GMT 2020
 */

package teapot.pga;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import teapot.pga.LocModel;
import teapot.pga.Options;
import teapot.pga.Report;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Report_ESTest extends Report_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--REPORT-FILE", "");
      locModel0.setOptions(options0);
      locModel0.setStart(929L);
      Report.reportCsv(locModel0);
      assertEquals(0L, locModel0.getFileCountSkiped());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--REPORT-FILE", "");
      locModel0.setOptions(options0);
      locModel0.setStart(929L);
      Report.report(locModel0);
      assertEquals(0L, locModel0.getFolderCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--REPORT-FILE", "");
      locModel0.setOptions(options0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        Report.reportCsv(locModel0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      // Undeclared exception!
      try { 
        Report.reportCommon(locModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--REPORT-FILE", "");
      locModel0.setOptions(options0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        Report.report(locModel0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--REPORT-FILE", "TE");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFileCountSkiped());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--COUNTED", "--OUT");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFileCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--IGNORED", "");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFileCountText());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--CATEGORIZED", "--FOUND");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getEnd());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--FOUND", "--HELP");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFileCountBinary());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--FOUND", "");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFileCountUnique());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--REPORT-FILE", "--XML");
      locModel0.setOptions(options0);
      Report.report(locModel0);
      assertEquals(0L, locModel0.getFileCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--REPORT-FILE", "--XML");
      locModel0.setOptions(options0);
      Report.reportCsv(locModel0);
      assertEquals(0L, locModel0.getFileCountSkiped());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--REPORT-FILE", "");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFileCountText());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      options0.set("--COUNTED", "");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFolderCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--COUNTED", "--OUT");
      locModel0.setOptions(options0);
      // Undeclared exception!
      try { 
        Report.report(locModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--IGNORED", "");
      locModel0.setOptions(options0);
      // Undeclared exception!
      try { 
        Report.reportCsv(locModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--IGNORED", "1");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFileCountUnique());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocModel locModel0 = new LocModel();
      Options options0 = new Options();
      HashMap<String, String> hashMap0 = options0.getOpts();
      hashMap0.put("--CATEGORIZED", "");
      locModel0.setOptions(options0);
      Report.reportCommon(locModel0);
      assertEquals(0L, locModel0.getFileCountBinary());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Report report0 = new Report();
  }
}
