/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 18 10:49:53 GMT 2020
 */

package teapot.pga;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import teapot.pga.AnalyzerHtml;
import teapot.pga.FileModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnalyzerHtml_ESTest extends AnalyzerHtml_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      MockFile mockFile0 = new MockFile("/ZE$S)I &>c'6r}'qne");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZE$S)I &>c'6r}'qne");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<!--$4{");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<!--$4{");
      FileModel fileModel0 = new FileModel("/ZE$S)I &>c'6r}'qne");
      analyzerHtml0.analyzeFile(mockFile0, fileModel0);
      assertEquals(2L, fileModel0.getCommentLines());
      assertEquals(0L, fileModel0.getWhiteLines());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      MockFile mockFile0 = new MockFile("/ZE$S)I &>c'6r}'qne");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZE$S)I &>c'6r}'qne");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/*<!-u$4{");
      FileModel fileModel0 = new FileModel("/ZE$S)I &>c'6r}'qne");
      analyzerHtml0.analyzeFile(mockFile0, fileModel0);
      assertEquals(1L, fileModel0.getNormalLines());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      MockFile mockFile0 = new MockFile("/ZE$S)I &>c'6r}'qne");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZE$S)I &>c'6r}'qne");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<!--$v-->");
      FileModel fileModel0 = new FileModel("/ZE$S)I &>c'6r}'qne");
      analyzerHtml0.analyzeFile(mockFile0, fileModel0);
      assertEquals(1L, fileModel0.getCommentLines());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      FileModel fileModel0 = new FileModel("");
      // Undeclared exception!
      try { 
        analyzerHtml0.analyzeFile((File) null, fileModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("FileModel(fileName=0");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("FileModel(fileName=", "", (File) mockFile0);
      FileModel fileModel0 = new FileModel();
      analyzerHtml0.analyzeFile(file0, fileModel0);
      assertEquals("C:\\Users\\benju\\git\\teapot-pga", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      File file0 = MockFile.createTempFile("MLWgXxuw;z0rJhY", "MLWgXxuw;z0rJhY");
      MockFile mockFile0 = new MockFile(file0, "MLWgXxuw;z0rJhY");
      FileModel fileModel0 = new FileModel("//$4{");
      analyzerHtml0.analyzeFile(mockFile0, fileModel0);
      assertEquals(0L, fileModel0.getLines());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      MockFile mockFile0 = new MockFile("/ZE$S)I &>c'6r}'qne");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZE$S)I &>c'6r}'qne");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\uFFFD\u0000\u0000\u0000\u0000/*<!-u$4{*/");
      // Undeclared exception!
      try { 
        analyzerHtml0.analyzeFile(mockFile0, (FileModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.AnalyzerHtml", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\benju\\AppData\\Local\\Temp\\MLWgXxuw;z0rJhY0MLWgXxuw;z0rJhY");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//$4{");
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      File file0 = MockFile.createTempFile("MLWgXxuw;z0rJhY", "MLWgXxuw;z0rJhY");
      FileModel fileModel0 = new FileModel("//$4{");
      analyzerHtml0.analyzeFile(file0, fileModel0);
      assertEquals(1L, fileModel0.getCommentLines());
      assertEquals(0L, fileModel0.getWhiteLines());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      MockFile mockFile0 = new MockFile("/ZE$S)I &>c'6r}'qne");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZE$S)I &>c'6r}'qne");
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-73);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<!--${-->");
      // Undeclared exception!
      try { 
        analyzerHtml0.analyzeFile(mockFile0, (FileModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.AnalyzerHtml", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      MockFile mockFile0 = new MockFile("/ZE$S)I &>c'6r}'qne");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZE$S)I &>c'6r}'qne");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<!--$4{");
      FileModel fileModel0 = new FileModel();
      analyzerHtml0.analyzeFile(mockFile0, fileModel0);
      assertEquals(1L, fileModel0.getNormalLines());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      MockFile mockFile0 = new MockFile("/ZE$S)I &>c'6r}'qne");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZE$S)I &>c'6r}'qne");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/*?\u0000\u0000\u0000\u0000/*<!-u$4{*/");
      // Undeclared exception!
      try { 
        analyzerHtml0.analyzeFile(mockFile0, (FileModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.AnalyzerHtml", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnalyzerHtml analyzerHtml0 = new AnalyzerHtml();
      MockFile mockFile0 = new MockFile("/ZE$S)I &>c'6r}'qne");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ZE$S)I &>c'6r}'qne");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/*<!-u$4{");
      FileModel fileModel0 = new FileModel("/ZE$S)I &>c'6r}'qne");
      analyzerHtml0.analyzeFile(mockFile0, fileModel0);
      assertEquals(1L, fileModel0.getCommentLines());
      assertEquals(0L, fileModel0.getNormalLines());
  }
}
