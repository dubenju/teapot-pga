/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 18 10:51:05 GMT 2020
 */

package teapot.pga;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import teapot.pga.AnalyzerJava;
import teapot.pga.FileModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnalyzerJava_ESTest extends AnalyzerJava_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      FileModel fileModel0 = new FileModel("xml");
      // Undeclared exception!
      try { 
        analyzerJava0.analyzeFile((File) null, fileModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      MockFile mockFile0 = new MockFile("r~7^TxkV/*\";H+", " &&\u0000");
      File file0 = MockFile.createTempFile("r~7^TxkV/*\";H+", " &&\u0000", (File) mockFile0);
      FileModel fileModel0 = new FileModel("xml");
      FileSystemHandling.shouldAllThrowIOExceptions();
      analyzerJava0.analyzeFile(file0, fileModel0);
      assertFalse(mockFile0.equals((Object)file0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileModel fileModel0 = new FileModel();
      MockFile mockFile0 = new MockFile("", "");
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      analyzerJava0.analyzeFile(mockFile0, fileModel0);
      assertEquals(0L, fileModel0.getFileSize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileModel fileModel0 = new FileModel();
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("LQ.kb:U", "LQ.kb:U", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LQ.kb:U0LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/*[*\u0000\u0000\u0000}[\u0000\u0000\u0000\u0000[/*[*\u0000\u0000\u0000}*/");
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      analyzerJava0.analyzeFile(file0, fileModel0);
      assertEquals(1L, fileModel0.getNormalLines());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileModel fileModel0 = new FileModel();
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("LQ.kb:U", "LQ.kb:U", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LQ.kb:U0LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//H#RvKPY+cu:/*");
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      analyzerJava0.analyzeFile(file0, fileModel0);
      assertEquals(1L, fileModel0.getNormalLines());
      assertEquals(0L, fileModel0.getWhiteLines());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileModel fileModel0 = new FileModel();
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("LQ.kb:U", "LQ.kb:U", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LQ.kb:U0LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//");
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      analyzerJava0.analyzeFile(file0, fileModel0);
      assertEquals(1L, fileModel0.getCommentLines());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FileModel fileModel0 = new FileModel();
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("LQ.kb:U", "LQ.kb:U", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LQ.kb:U0LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/*[*\u0000\u0000\u0000}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/*[*\u0000\u0000\u0000}[\u0000\u0000\u0000\u0000[/*[*\u0000\u0000\u0000}*/");
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      analyzerJava0.analyzeFile(file0, fileModel0);
      assertEquals(2L, fileModel0.getCommentLines());
      assertEquals(0L, fileModel0.getNormalLines());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileModel fileModel0 = new FileModel();
      MockFile mockFile0 = new MockFile("////", "////");
      File file0 = MockFile.createTempFile("LQ.kb:U", "LQ.kb:U", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LQ.kb:U0LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/*[*\u0000\u0000\u0000}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "////");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "////");
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      analyzerJava0.analyzeFile(file0, fileModel0);
      assertEquals(2L, fileModel0.getCommentLines());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FileModel fileModel0 = new FileModel();
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("LQ.kb:U", "LQ.kb:U", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LQ.kb:U0LQ.kb:U");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/*[*\u0000\u0000\u0000}[\u0000\u0000\u0000\u0000[/*[*\u0000\u0000\u0000}*/");
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      analyzerJava0.analyzeFile(file0, fileModel0);
      assertEquals(1L, fileModel0.getCommentLines());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AnalyzerJava analyzerJava0 = new AnalyzerJava();
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("LQ.kb:U", "LQ.kb:U", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LQ.kb:U0LQ.kb:U");
      byte[] byteArray0 = new byte[20];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      // Undeclared exception!
      try { 
        analyzerJava0.analyzeFile(file0, (FileModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("teapot.pga.AnalyzerJava", e);
      }
  }
}
